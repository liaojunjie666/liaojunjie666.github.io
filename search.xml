<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>单例模式</title>
    <url>/2023/06/21/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-模式简介"><a href="#1-模式简介" class="headerlink" title="1.模式简介"></a>1.模式简介</h1><blockquote>
<p>单例模式：限制类实例化次数只能一次，一个类只有一个实例，并提供一个访问它的全局访问点。</p>
</blockquote>
<p>单例模式是创建型设计模式的一种。有一些对象我们往往只需要一个，比如线程池、全局缓存、浏览器中的window对象等。</p>
<h1 id="2-模式特点"><a href="#2-模式特点" class="headerlink" title="2.模式特点"></a>2.模式特点</h1><ol>
<li>类只有一个实例。</li>
<li>全局可访问该实例。</li>
<li>自行实例化（主动实例化）</li>
<li>可推迟初始化，即延迟执行（与静态类/对象的区别）</li>
</ol>
<p>JavaScript 是一门非正规面向对象的语言，ES6中class定义的类也是对象。单例模式中要求一个<code>唯一</code> 和<code>全局访问</code> 的对象，在JavaScript中类似全局对象，刚好满足单例模式的两个特点：<code>唯一</code> 和<code>可全局访问</code> 。虽然它不是正规的单例模式，但不可否认确实具备类单例模式的特点。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//全局对象</span></span><br><span class="line"><span class="keyword">const</span> globalObj = {};</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-1-使用全局变量会有以下问题"><a href="#2-1-使用全局变量会有以下问题" class="headerlink" title="2.1 使用全局变量会有以下问题"></a>2.1 使用全局变量会有以下问题</h2><ol>
<li>命名空间污染(变量名冲突)</li>
<li>维护时不方便管控（容易不小心覆盖）</li>
</ol>
<h2 id="2-2-全局变量问题折中的应对方案"><a href="#2-2-全局变量问题折中的应对方案" class="headerlink" title="2.2 全局变量问题折中的应对方案"></a>2.2 全局变量问题折中的应对方案</h2><ol>
<li>使用命名空间</li>
<li>闭包封装私有变量（利用函数作用域）</li>
<li>ES6的 const/symbol</li>
</ol>
<p>虽然全局变量可以实现单例，但因其自身的问题，不建议在实际项目中将其作为单例模式的应用，特别是中大型项目的应用中，全局变量的维护该是考虑的成本。</p>
<h1 id="3-模式的实现"><a href="#3-模式的实现" class="headerlink" title="3.模式的实现"></a>3.模式的实现</h1><blockquote>
<p>实现方式：使用一个变量存储类实例对象（值初始为&nbsp;<code>null/undefined</code>&nbsp;）。进行类实例化时，判断类实例对象是否存在，存在则返回该实例，不存在则创建类实例后返回。多次调用类生成实例方法，返回同一个实例对象。</p>
</blockquote>
<h2 id="3-1-“简单版”单例模式"><a href="#3-1-“简单版”单例模式" class="headerlink" title="3.1  “简单版”单例模式"></a>3.1  “简单版”单例模式</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = <span class="keyword">function</span> (<span class="params">name</span>) {</span><br><span class="line">&nbsp; &nbsp; <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&nbsp; &nbsp; <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="literal">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property">getInstance</span> = <span class="keyword">function</span> (<span class="params">name</span>) {</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">instance</span>) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">&nbsp; &nbsp; }</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Winner</span> = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">'Winner'</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Looser</span> = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">'Looser'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span> === <span class="title class_">Looser</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span>.<span class="title function_">getName</span>()); <span class="comment">//Winner</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Looser</span>.<span class="title function_">getName</span>()); <span class="comment">//Winner</span></span><br></pre></td></tr></tbody></table></figure>

<p>代码中定义了一个 <code>Singleton</code> 函数，函数在 JavaScript 中是“一等公民“，可以为其定义属性方法。因此我们可以在函数 <code>Singleton</code> 中定义一个 <code>getInstance()</code> 方法来管控单例，并创建返回类实例对象，而不是通过传统的 <code>new</code> 操作符来创建类实例对象。</p>
<p><code>this.instance</code> 存储创建的实例对象，每次接收到创建实例对象时，判断 <code>this.instance</code> 是否有实例对象，有则返回，没有则创建并更新 <code>this.instance</code> 值，因此无论调用多少次 <code>getInstance()</code>，最终都只会返回同一个 <code>Singleton</code> 类实例对象。</p>
<p><strong>存在问题：</strong></p>
<ol>
<li>不够“透明”，无法使用&nbsp;<code>new</code>&nbsp;来进行类实例化，使用<code>new</code>后就不是单例了，需约束该类实例化的调用方式：&nbsp;<code>Singleton.getInstance(...)</code>;</li>
<li>管理单例的操作，与对象创建的操作，功能代码耦合在一起，不符合 “单一职责原则”</li>
</ol>
<h2 id="3-2-”透明版“单例模式"><a href="#3-2-”透明版“单例模式" class="headerlink" title="3.2  ”透明版“单例模式"></a>3.2  ”透明版“单例模式</h2><p>实现 “透明版” 单例模式，意图解决：统一使用&nbsp;<code>new</code>&nbsp;操作符来获取单例对象， 而不是&nbsp;<code>Singleton.getInstance(...)</code>。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CreateSingleton</span> = (<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">let</span> instance;</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">name</span>) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">if</span> (instance) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">return</span> instance;</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; }</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">return</span> instance = <span class="variable language_">this</span>;</span><br><span class="line">&nbsp; &nbsp; }</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="title class_">CreateSingleton</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Winner</span> = <span class="keyword">new</span> <span class="title class_">CreateSingleton</span>(<span class="string">'Winner'</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Looser</span> = <span class="keyword">new</span> <span class="title class_">CreateSingleton</span>(<span class="string">'Looser'</span>);</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span> === <span class="title class_">Looser</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span>.<span class="title function_">getName</span>()); &nbsp;<span class="comment">//Winner</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Looser</span>.<span class="title function_">getName</span>()); &nbsp;<span class="comment">//Winner</span></span><br></pre></td></tr></tbody></table></figure>
<p>“透明版”单例模式解决了不够“透明”的问题，我们又可以使用&nbsp;<code>new</code>&nbsp;操作符来创建实例对象。</p>
<h2 id="3-3-“代理版”单例模式"><a href="#3-3-“代理版”单例模式" class="headerlink" title="3.3  “代理版”单例模式"></a>3.3  “代理版”单例模式</h2><p>通过“代理”的形式，意图解决：将管理单例操作，与对象创建操作进行拆分，实现更小的粒度划分，符合“单一职责原则”。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ProxyCreateSingleton</span> = (<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">let</span> instance;</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">name</span>) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">if</span> (instance) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">return</span> instance;</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; }</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">return</span> instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">&nbsp; &nbsp; }</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = <span class="keyword">function</span> (<span class="params">name</span>) {</span><br><span class="line">&nbsp; &nbsp; <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title class_">Singleton</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Winner</span> = <span class="keyword">new</span> <span class="title class_">ProxyCreateSingleton</span>(<span class="string">'Winner'</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Looser</span> = <span class="keyword">new</span> <span class="title class_">ProxyCreateSingleton</span>(<span class="string">'Looser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span> === <span class="title class_">Looser</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span>.<span class="title function_">getName</span>()); &nbsp;<span class="comment">//Winner</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Looser</span>.<span class="title function_">getName</span>()); &nbsp;<span class="comment">//Winner</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-4-惰性单例"><a href="#3-4-惰性单例" class="headerlink" title="3.4 惰性单例"></a>3.4 惰性单例</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">LazySingleton</span> = (<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">function</span> <span class="title function_">Singleton</span>(<span class="params">name</span>) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; }</span><br><span class="line">&nbsp; &nbsp; }</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">name</span>) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">if</span> (!instance) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; }</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">return</span> instance;</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; }</span><br><span class="line">})()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Winner</span> = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>(<span class="string">'Winner'</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Looser</span> = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>(<span class="string">'Looser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span> === <span class="title class_">Looser</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span>.<span class="title function_">getName</span>()); &nbsp;<span class="comment">//Winner</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Looser</span>.<span class="title function_">getName</span>()); &nbsp;<span class="comment">//Winner</span></span><br></pre></td></tr></tbody></table></figure>
<p>这就是惰性单例的应用，不在js加载时就进行实例化创建， 而是在需要的时候再进行单例的创建。 如果再次调用， 那么返回的永远是第一次实例化后的实例对象。</p>
<h2 id="3-5-ES6中创建单例模式"><a href="#3-5-ES6中创建单例模式" class="headerlink" title="3.5 ES6中创建单例模式"></a>3.5 ES6中创建单例模式</h2><p>ES6中创建对象时引入了<code>class</code>和<code>constructor</code>用来创建对象。提供了为<code>class</code>提供了<code>static</code>关键字定义静态方法， 我们可以将<code>constructor</code>中判断是否实例化的逻辑放入一个静态方法<code>getInstance</code>中，调用该静态方法获取实例，&nbsp;<code>constructor</code>中只包需含实例化所需的代码，这样能增强代码的可读性、结构更加优化。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; <span class="title function_">constructor</span>(<span class="params">name</span>) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&nbsp; &nbsp; }</span><br><span class="line">&nbsp; &nbsp; </span><br><span class="line">&nbsp; &nbsp; <span class="title function_">getName</span>(<span class="params"></span>) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&nbsp; &nbsp; }</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params">name</span>) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">instance</span>) {</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>(name);</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; }</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">&nbsp; &nbsp; }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="title class_">Winner</span> = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">'Winner'</span>);</span><br><span class="line"><span class="title class_">Looser</span> = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>(<span class="string">'Looser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span> === <span class="title class_">Looser</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span>.<span class="title function_">getName</span>()); &nbsp;<span class="comment">//Winner</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Looser</span>.<span class="title function_">getName</span>()); &nbsp;<span class="comment">//Winner</span></span><br></pre></td></tr></tbody></table></figure>


<h1 id="4-适用场景"><a href="#4-适用场景" class="headerlink" title="4.适用场景"></a>4.适用场景</h1><p><strong>“单例模式的特点，意图解决：维护一个全局实例对象。”</strong></p>
<ol>
<li>引用第三方库（多次引用只会使用一个库引用，如 jQuery）</li>
<li>弹窗（登录框，信息提升框）</li>
<li>购物车 (一个用户只有一个购物车)</li>
<li>全局态管理 store (Vuex / Redux)</li>
</ol>
<p>项目中引入第三方库时，重复多次加载库文件时，全局只会实例化一个库对象，如 <code>jQuery</code>，<code>lodash</code>，<code>moment</code> …, 其实它们的实现理念也是单例模式应用的一种：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 引入代码库 libs(库别名）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">libs</span> != <span class="literal">null</span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">libs</span>;    <span class="comment">// 直接返回</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">libs</span> = <span class="string">'...'</span>;   <span class="comment">// 初始化</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="5-优缺点"><a href="#5-优缺点" class="headerlink" title="5.优缺点"></a>5.优缺点</h1><ul>
<li>优点：适用于单一对象，只生成一个对象实例，避免频繁创建和销毁实例，减少内存占用。</li>
<li>缺点：不适用动态扩展对象，或需创建多个相似对象的场景。</li>
</ul>
<p><em>TIPS: 多线程编程语言中，单例模式会涉及同步锁的问题。而 JavaScript 是单线程的编程语言，暂可忽略该问题。</em></p>
</body></html>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2023/06/21/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-模式简介"><a href="#1-模式简介" class="headerlink" title="1. 模式简介"></a>1. 模式简介</h1><blockquote>
<p>策略模式： 定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p>
</blockquote>
<h1 id="2-例子1：计算年终奖"><a href="#2-例子1：计算年终奖" class="headerlink" title="2. 例子1：计算年终奖"></a>2. 例子1：计算年终奖</h1><p>现在假设一个公司的年终奖是根据<strong>工资基数</strong>和<strong>绩效等级</strong>来发放的：</p>
<table>
<thead>
<tr>
<th>绩效等级</th>
<th>年终奖数额</th>
</tr>
</thead>
<tbody><tr>
<td>S</td>
<td>四倍工资</td>
</tr>
<tr>
<td>A</td>
<td>三倍工资</td>
</tr>
<tr>
<td>B</td>
<td>两倍工资</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Strategies</span> = {</span><br><span class="line">	<span class="string">'S'</span>: <span class="function"><span class="params">salary</span> =&gt;</span> salary * <span class="number">4</span>,</span><br><span class="line">	<span class="string">'A'</span>: <span class="function"><span class="params">salary</span> =&gt;</span> salary * <span class="number">3</span>,</span><br><span class="line">	<span class="string">'B'</span>: <span class="function"><span class="params">salary</span> =&gt;</span> salary * <span class="number">2</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">calculateBonus</span> = (<span class="params">performanceLevel,salary</span>)=&gt;{</span><br><span class="line">	<span class="keyword">return</span> <span class="title class_">Strategies</span>[prefformanceLevel](salary);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">calculateBonus</span>(<span class="string">'S'</span>,<span class="number">15000</span>) <span class="comment">//60000</span></span><br></pre></td></tr></tbody></table></figure>
<p>在传统面向对象语言中，要实现策略模式需要定义</p>
<ol>
<li>一组策略类，策略类封装了具体的算法。</li>
<li>环境类 Context，Context 接受客户的请求，随后将请求委托给某一个策略类。</li>
</ol>
<p>太麻烦了。而 JavaScript 则由于它丰富的表达能力，可以将<code>calculateBonus</code>函数看成是Context，将<code>Strategies</code>对象看成一组策略，轻松地实现了一个策略模式。</p>
<p><strong>额外的tips</strong><br>上文的写法其实还有个小问题，就是 performanceLevel 这个变量是硬编码的，比如<code>"S"</code>,&nbsp;<code>"A"</code>,&nbsp;<code>"B"</code>。这么短的一个字符可能不会带来什么问题，但假设这个策略的名称比较长，比如<code>"Christina"</code>，那你就很容易敲错，敲错就出 bug 了嘛。</p>
<p>我们可以用ES6的<a href="http://es6.ruanyifeng.com/#docs/symbol">Symbol</a>和<a href="http://es6.ruanyifeng.com/#docs/destructuring">解构</a>把它改写一下：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PERFORMANCE_LEVEL</span> = {<span class="attr">S</span>:<span class="string">'S'</span>, <span class="attr">A</span>: <span class="string">'A'</span>, <span class="attr">B</span>: <span class="string">'B'</span>};  </span><br><span class="line"><span class="keyword">const</span> {S, A, B}  = <span class="variable constant_">PERFORMANCE_LEVEL</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Strategies</span> = {  </span><br><span class="line">  [S]: <span class="function"><span class="params">salary</span>=&gt;</span> salary * <span class="number">4</span>,  </span><br><span class="line">  [A]: <span class="function"><span class="params">salary</span>=&gt;</span> salary * <span class="number">3</span>,  </span><br><span class="line">  [B]: <span class="function"><span class="params">salary</span>=&gt;</span> salary * <span class="number">2</span>,  </span><br><span class="line">}  </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">calculateBonus</span> = (<span class="params">performanceLevel, salary</span>) =&gt;{  </span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Strategies</span>[performanceLevel](salary);  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="title function_">calculateBonus</span>(S, <span class="number">15000</span>); <span class="comment">// 60000</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>在函数作为一等对象的语言中，策略模式是隐形的。strategy就是值作为函数的变量。</p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>策略模式</tag>
      </tags>
  </entry>
</search>
